
# Copyright 2014 Douglas J. Norment for SourceApprentice
# http://www.sourceapprentice.com

from ReportStructure import ReportStructure
from ReportData import ReportData
import logging

logger = logging.getLogger( 'main._DATACOL' )

class BadReportCollectorException( Exception ):
  pass

"""
  Abstract representation of ReportDataCollector class
  All specific ReportDataCollector classes will inherit from this one.
"""
class AbstractReportDataCollector( object ):
  
  """
  This is the abstract class that all future ReportDataExtractor classes will inherit from.
  A subclass of this class which is determined by the config file passed
    will be instantiated dynamically to process the extraction directives.
  ... Which makes this the ideal class to house the instances of ReportData and
          ReportStructure.
  """
  
  """
    Initialize AbstractReportDataCollector class.
  """
  def __init__( self):
    super(AbstractReportDataCollector, self).__init__()
    self.ReportData = {}
    self.ReportStructures = {}
    self.lastReportName = ''
    logger.debug( 'Initializing ({})'.format( self ) )


  # ********************
  # Set up report column specs
  # ********************

  # 10/1/2014 Design notes: There were multiple approaches to storing these specs.
  # Since they will be generated by user entered config data,
  #   the approach used was the most pessimistic.
  # Not really sure about the design of this, to be frank,
  #   but I wanted to move forward on the project.
  # So, a potentially bad design was encapsulated so that a better
  #   implementation can be made of it in the future, should there
  #   be time and resources.
  
  
  """
    Initializes for a report.  Uses reportStructureName requested.
    Throws BadReportCollectorException if reportStructureName already existed.
  """
  def appendReportSpec( self, reportStructureName ):

    # If reportStructureName already exists
    if reportStructureName in self.ReportStructures:
      errorMsg = "Tried to add report structure for '{}'.  Structure already exists.".format( reportStructureName )
      logger.critical( errorMsg )
      raise BadReportCollectorException( errorMsg )

    self.ReportStructures[ reportStructureName ] = ReportStructure( reportStructureName )
    logger.debug( "+ {}={}".format( reportStructureName, self.ReportStructures[ reportStructureName ] ))

  """
    Add report structures by data groups.
    Throws BadReportCollectorException if reportStructureName does not exist,
    or if dataGroupName already exists.
  """
  def appendDataGroupSpec( self, reportStructureName, dataGroupName ):
    if not self.ReportStructures.get( reportStructureName ):
      
      errorMsg = "Requested report structure '{}' does not exist.".format( reportStructureName )
      logger.critical( errorMsg )
      raise BadReportCollectorException( errorMsg )
      
    rptStructure = self.ReportStructures[ reportStructureName ]
    
    # If datagroup already exists
    if rptStructure.getDataGroupStructure(dataGroupName):
      errorMsg = "Tried to add data group structure for '{}.{}'.  Structure already exists.".format( reportStructureName, dataGroupName)
      logger.critical( errorMsg )
      raise BadReportCollectorException( errorMsg )

    newDataGroup = rptStructure.createDataGroupStructure( dataGroupName )
    
    logger.debug( "+ {}.{}={}".format( reportStructureName, dataGroupName, newDataGroup ))
    return newDataGroup
  

  """
    Add column structure into datagroup.
    Throws BadReportCollectorException if columnName already exists.
  """
  
  def appendColumnSpecIntoDatagroup( self, dataGroup, columnName, columnSpec ):
    
    reportStructureName = dataGroup.reportName
    dataGroupName = dataGroup.groupName

    rptColStructure=self.ReportStructures[ reportStructureName ].DataGroupStructures[ dataGroupName ].columns.get( columnName )
    if rptColStructure:
      
      errorMsg = "Tried to add column structure for '{}.{}.{}'.  Structure already exists.".format( reportName, dataGroupName, columnName)
      logger.critical( errorMsg )
      raise BadReportCollectorException( errorMsg )
    
    rptStructure = self.ReportStructures[ reportStructureName ]

    # If column already exists
    if dataGroup.columns.get( columnName ):
      errorMsg = "Tried to add column structure for '{}.{}.{}'.  Structure already exists.".format( reportStructureName, dataGroupName, columnName)
      logger.critical( errorMsg )
      raise BadReportCollectorException( errorMsg )

    newColStructure = rptStructure.createDataColumnStructure( dataGroupName, columnName, columnSpec )
    logger.debug( "+ {}.{}.{}={}".format( reportStructureName, dataGroupName, columnName, newColStructure ))



  """
    Return report structure requested ( or None )
  """
  def getReportStructure( self, reportStructureName ):
    return self.ReportStructures.get( reportStructureName )


  """
    Dump report structure as YAML return
  """
  def dumpReportStructure( self ):
    
    tab=' '*3 # YAML doesn't seem to recognize tabs as whitespace
    
    # Dump report structure as yaml:
    returnString = []
    returnString.append("\nColumnStructures:\n")
    for eachReportName in sorted(self.ReportStructures):
      returnString.append("{}{}:\n".format( tab, eachReportName ))
      returnString.append( self.ReportStructures[ eachReportName ].dumpReportStructure() )

    return ''.join( returnString )
  
  
  # ********************
  # Process data
  # ********************
  
  """
    Set up to process requested file.
  """
  def processFile( self, reportName, excludedTargets ):
    
    self.lastReportName = reportName
    
    

    # fetchDataMethods()

