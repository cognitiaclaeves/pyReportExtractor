
# Copyright 2014 Douglas J. Norment for SourceApprentice
# http://www.sourceapprentice.com

from ReportStructure import ReportStructure
from ReportData import ReportData
import logging

logger = logging.getLogger( 'main._DATACOL' )

class BadReportCollectorException( Exception ):
  pass

"""
  Abstract representation of ReportDataCollector class
  All specific ReportDataCollector classes will inherit from this one.
"""
class AbstractReportDataCollector( object ):
  
  """
    Initialize AbstractReportDataCollector class.
  """
  def __init__( self):
    super(AbstractReportDataCollector, self).__init__()
    self.ReportData = {}
    self.ReportStructures = {}
    self.lastReportName = ''
    logger.debug( 'Initializing ({})'.format( self ) )


  # ********************
  # Set up report column specs
  # ********************

  # There were multiple approaches to storing these specs.  Since they will be generated by user config data,
  #    the approach used was the most pessimistic.
  
  """
    Initializes for a report.  Uses reportStructureName requested.
    Throws BadReportCollectorException if reportStructureName already existed.
  """
  def appendReportSpec( self, reportStructureName ):

    # If reportStructureName already exists
    if reportStructureName in self.ReportStructures:
      errorMsg = "Tried to add report structure for '{}'.  Structure already exists.".format( reportStructureName )
      logger.critical( errorMsg )
      raise BadReportCollectorException( errorMsg )

    self.ReportStructures[ reportStructureName ] = ReportStructure( reportStructureName )
    logger.debug( "+ {}={}".format( reportStructureName, self.ReportStructures[ reportStructureName ] ))

  """
    Add report structures by data groups.
    Throws BadReportCollectorException if reportStructureName does not exist,
    or if dataGroupName already exists.
  """
  def appendDataGroupSpec( self, reportStructureName, dataGroupName ):
    if not self.ReportStructures.get( reportStructureName ):
      
      errorMsg = "Requested report structure '{}' does not exist.".format( reportStructureName )
      logger.critical( errorMsg )
      raise BadReportCollectorException( errorMsg )
      
    rptStructure = self.ReportStructures[ reportStructureName ]
    
    # If datagroup already exists
    if rptStructure.getDataGroupStructure(dataGroupName):
      errorMsg = "Tried to add data group structure for '{}.{}'.  Structure already exists.".format( reportStructureName, dataGroupName)
      logger.critical( errorMsg )
      raise BadReportCollectorException( errorMsg )

    newDataGroup = rptStructure.createDataGroupStructure( dataGroupName )
    
#    logger.critical( self.ReportStructures[ reportStructureName ].DataGroupStructures[dataGroupName] ) # [ dataGroupName ] )
#    self.ReportStructures[ reportStructureName ].DataGroupStructures[ dataGroupName ].group= newDataGroup
    
#    ndg = self.ReportStructures[ reportStructureName ].DataGroupStructures[ dataGroupName ].group # = self.ReportStructures[ reportStructureName ][ dataGroupName ].group
    
    logger.debug( "+ {}.{}={}".format( reportStructureName, dataGroupName, newDataGroup ))
    return newDataGroup
  

  """
    Add column structure into datagroup.
    Throws BadReportCollectorException if columnName already exists.
  """
  
  def appendColumnSpecIntoDatagroup( self, dataGroup, columnName, columnSpec ):
    
    reportStructureName = dataGroup.reportName
    dataGroupName = dataGroup.groupName

    rptColStructure=self.ReportStructures[ reportStructureName ].DataGroupStructures[ dataGroupName ].columns.get( columnName )
    if rptColStructure:
      
      errorMsg = "Tried to add coloum structure for '{}.{}.{}'.  Structure already exists.".format( reportName, dataGroupName, columnName)
      logger.critical( errorMsg )
      raise BadReportCollectorException( errorMsg )
    
    rptStructure = self.ReportStructures[ reportStructureName ]

    # If column already exists
    if dataGroup.columns.get( columnName ):
      errorMsg = "Tried to add column structure for '{}.{}.{}'.  Structure already exists.".format( reportStructureName, dataGroupName, columnName)
      logger.critical( errorMsg )
      raise BadReportCollectorException( errorMsg )

    newColStructure = rptStructure.createDataColumnStructure( dataGroupName, columnName, columnSpec )
    
#    logger.critical( self.ReportStructures[ reportStructureName ].DataGroupStructures[dataGroupName] ) # [ dataGroupName ] )
    # self.ReportStructures[ reportStructureName ].DataGroupStructures[ dataGroupName ].group= newDataGroup
    
    # ndg = self.ReportStructures[ reportStructureName ].DataGroupStructures[ dataGroupName ].group # = self.ReportStructures[ reportStructureName ][ dataGroupName ].group
    
    logger.debug( "+ {}.{}.{}={}".format( reportStructureName, dataGroupName, columnName, newColStructure ))


    # self.ReportStructures[ reportStructureName ].DataGroupStructures[ dataGroupName ].columns[ columnName ]=columnSpec

    # cspc=self.ReportStructures[ reportStructureName ].DataGroupStructures[ dataGroupName ].columns[ columnName ]

    # logger.debug( "+ {}.{}.{}={}".format( reportStructureName, dataGroupName, columnName, cspc ) )


  # """
  #   Add report structure.
  # """
  # def addReportStructure( self, reportStructureName, reportStructure ):
  #   if self.ReportStructures.get( reportStructureName ):
  #     errorMsg = "Tried to add report structure for '{}'.  This report structure already exists.".format( reportStructureName)
  #     logger.critical( errorMsg )
  #     raise BadReportCollectorException( errorMsg )
  #   self.ReportStructures[ reportStructureName ] = reportStructure
    
  """
    Return report structure requested ( or None )
  """
  def getReportStructure( self, reportStructureName ):
    return self.ReportStructures.get( reportStructureName )

  # getColumnByName( dataElementName, columnName, dataRowToParse )


  def dumpReportStructure( self ):
    
    returnString = []
    returnString.append("{'ColumnStructures': {")
    for eachReportName in sorted(self.ReportStructures):
      returnString.append("'{}': {{".format( eachReportName ))
      returnString.append( self.ReportStructures[ eachReportName ].dumpReportStructure() )
      returnString.append("},")
    returnString.append("},")
  
    return ''.join( returnString )
  
# {'ColumnStructures':
# - {'ReportName1': {
#  'dataGroup1': {'columnName1': [0, 1],
#                 'columnName2': [1, '-', 15]},
#  'dataGroup2': {'columnName3': [0, 2]}
# - },
# - 'ReportName2': {
#  'dataGroup3': {'columnName1': [0, 1]}
# - }
# - },

  
  
  # ********************
  # Process data
  # ********************
  
  """
    Set up to process requested file.
  """
  def processFile( self, reportName, excludedTargets ):
    
    self.lastReportName = reportName
    
    

    # fetchDataMethods()




# reportData.createDataGroup( self, DataGroupName, dataStructure )
# reportData.createNewDataRow( self, DataGroupName, reportRowNumber, dataTuple )

# ReportStructure()
# reportStructure.createDataGroupStructure( self, dataGroupName ) # Use datagroupstructure returned
# reportStructure.setDataColumnStructure( self, dataGroupName, columnName, structureTuple )

# reportStructure.getDataColumnStructure( self, dataGroupName, columnName )
# reportStructure.getDataGroupStructure( self, dataGroupName )

  # def getDataGroupStructure( self, dataGroupName ):
  #   return self.DataGroupStructures[ dataGroupName ]
    
  # """
  #   Creates and Returns new Data Element Structure
  # """
  # def createDataGroupStructure( self, dataGroupName ):
  #   newDataGroupStructure = self.DataGroupStructures.get( dataGroupName )
  #   if newDataGroupStructure:
  #     errMsg='Tried to create a new data element structure with name that already exists: {}'.format( dataGroupName )
  #     logger.critical( errMsg )
  #     raise DataGroupStructureAlreadyExists( errMsg )
  #   newDataGroupStructure = []
  #   self.DataGroupStructures[ dataGroupName ] = newDataGroupStructure
  #   return newDataGroupStructure

  # """
  #   Sets column in data element structure
  # """
  # def setDataColumnStructure( self, dataGroupName, columnName, structureTuple ):
  #   newDataGroupColumn = self.getDataColumnStructure( dataGroupName, columnName )
  #   if newDataGroupColumn:
  #     errMsg="Tried to create {} in data element structure {}.  Column already exists.".format( columnName, dataGroupName )
  #     logger.critical( errMsg )
  #     raise ColumnAlreadyExistsInDataGroupStructure( errMsg )
      
  #   self.DataGroupStructures[ dataGroupName ][ columnName ] = structureTuple
    
  # """
  #   Get structure for column name given
  # """
  # def getDataColumnStructure( self, dataGroupName, columnName ):
  #     if not self.DataGroupStructures.get( dataGroupName ):
  #       errMsg="Tried to get data element structure that didn't exist: {}".format( dataGroupName )
  #       logger.critical( errMsg )
  #       raise BadDataGroupStructureRequest( errMsg )
  #     return self.DataGroupStructures.get( dataGroupName ).get( columnName )



# reportData
# 	"""
# 		Returns new data element
# 	"""
# 	def createDataGroup( self, DataGroupName, dataStructure ):
# 		newDataGroup = self.DataGroups.get( DataGroupName )
# 		if newDataGroup:
# 			raise DataGroupAlreadyExists( 'Tried to create data element when it already existed.' )
# 		newDataGroup = [ dataStructure, [] ]
# 		self.DataGroups[ DataGroupName ] = newDataGroup
# 		return newDataGroup

# 	"""
# 		Returns data element [] requested, or None
# 	"""
# 	def getDataGroup( self, DataGroupName ):
# 		return self.DataGroups.get( DataGroupName )[1]
		
# 	"""
# 		Stores and returns new data row
# 	"""
# 	def createNewDataRow( self, DataGroupName, reportRowNumber, dataTuple ):
# 		newDataRow = [ [None, -1, -1 ], [] ]
# 		# set the data structure
# 		newDataRow[0][0] = self.DataGroups[ DataGroupName[0] ]
# 		# set the data row number
# 		newDataRow[0][1]=len( self.DataGroups[ DataGroupName ] )
# 		# set the original report row number
# 		self.DataGroups[ DataGroupName ][1].append( newDataRow )
		
# 		return newDataRow

